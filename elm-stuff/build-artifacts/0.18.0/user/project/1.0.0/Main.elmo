var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$showConnectionError = function (model) {
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		_elm_lang$core$Native_Utils.update(
			model,
			{connectionModalState: _user$project$Connection_Models$Show}),
		{ctor: '[]'});
};
var _user$project$Main$filterNutrient = F2(
	function (nutrientType, nutrients) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (nutrientId, nutrient) {
					return _elm_lang$core$Native_Utils.eq(nutrient.nutrientType, nutrientType);
				}),
			nutrients);
	});
var _user$project$Main$getNutrientFoodAmountById = F2(
	function (id, food) {
		return _elm_lang$core$List$sum(
			A2(
				_elm_lang$core$List$map,
				function (fn) {
					return (fn.amount * _elm_lang$core$Basics$toFloat(food.amount)) * _elm_lang$core$Basics$toFloat(food.quantity);
				},
				A2(
					_elm_lang$core$List$filter,
					function (fn) {
						return _elm_lang$core$Native_Utils.eq(fn.nutrientId, id);
					},
					food.nutrients)));
	});
var _user$project$Main$calculateNutrientPercentageFromFoods = F3(
	function (hoveredFoodId, foods, nutrients) {
		var food = function () {
			var _p0 = hoveredFoodId;
			if (_p0.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p1 = A2(_elm_lang$core$Dict$get, _p0._0, foods);
				if (_p1.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(_p1._0);
				}
			}
		}();
		return A2(
			_elm_lang$core$Dict$map,
			F2(
				function (nutrientId, nutrient) {
					return _elm_lang$core$Native_Utils.update(
						nutrient,
						{
							amount: _elm_lang$core$List$sum(
								A2(
									_elm_lang$core$List$map,
									function (food) {
										return A2(_user$project$Main$getNutrientFoodAmountById, nutrient.id, food);
									},
									_elm_lang$core$Dict$values(foods))),
							hoveredAmount: function () {
								var _p2 = hoveredFoodId;
								if (_p2.ctor === 'Nothing') {
									return 0;
								} else {
									var _p3 = A2(_elm_lang$core$Dict$get, _p2._0, foods);
									if (_p3.ctor === 'Nothing') {
										return 0;
									} else {
										return A2(_user$project$Main$getNutrientFoodAmountById, nutrient.id, _p3._0);
									}
								}
							}()
						});
				}),
			nutrients);
	});
var _user$project$Main$hoverItemIsFood = function (item) {
	var _p4 = item;
	switch (_p4.ctor) {
		case 'Nutrient':
			return false;
		case 'Food':
			return true;
		default:
			return false;
	}
};
var _user$project$Main$aboutPage = function (model) {
	return {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Grid$col,
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs12,
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Card$view(
					A3(
						_rundis$elm_bootstrap$Bootstrap_Card$block,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Card$titleH4,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('About Get Your Nutrients'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Card$text,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('\n                        Get your nutrients is an application designed to help identify nutrients in certain foods,\n                        in an simple, easy and readable way. It has the aim is to provide insight in the lacking\n                        or abundance of Vitamins and Minerals in a person\'s diet and their effects.\n                         '),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Card$custom(
										A2(
											_elm_lang$html$Html$p,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$span,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(' All food and nutrient data has been retrieved and formatted from the '),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$href('https://www.usda.gov/'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('U.S Department of Argiculture'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(' food and nutrient database, and all nutrient descriptions sourced and summarised from '),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$a,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$href('http://www.webmd.com/vitamins-supplements/'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('WebMD'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('.'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											})),
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Card$custom(
											A2(
												_elm_lang$html$Html$p,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('If you would like to contact me, please visit my website at: '),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$href('http://www.kyrimsteele.com'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('www.kyrimsteele.com'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												})),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						_rundis$elm_bootstrap$Bootstrap_Card$config(
							{ctor: '[]'}))),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	};
};
var _user$project$Main$getFoodFromHoverItem = function (item) {
	var _p5 = item;
	switch (_p5.ctor) {
		case 'NothingHovered':
			return _elm_lang$core$Maybe$Nothing;
		case 'Nutrient':
			return _elm_lang$core$Maybe$Nothing;
		default:
			return _elm_lang$core$Maybe$Just(_p5._0);
	}
};
var _user$project$Main$informationSection = F2(
	function (hoverItem, foodDict) {
		var colour = function () {
			var _p6 = hoverItem;
			switch (_p6.ctor) {
				case 'NothingHovered':
					return '#3f9cb8';
				case 'Nutrient':
					var _p7 = _p6._0;
					return _user$project$Nutrient_View$getPercentageColour(
						A2(_user$project$Helpers$getPercentage, _p7.amount, _p7.dailyIntake));
				default:
					return '#b13fb8';
			}
		}();
		var info = function () {
			var _p8 = hoverItem;
			switch (_p8.ctor) {
				case 'NothingHovered':
					return 'Please hover over a food or nutrient to view its summary.';
				case 'Nutrient':
					return _p8._0.description;
				default:
					return 'The purple section on the progress bars below on each nutrient, shows the percentage of nutrients from the food.';
			}
		}();
		var sideHeader = function () {
			var _p9 = hoverItem;
			switch (_p9.ctor) {
				case 'NothingHovered':
					return '';
				case 'Nutrient':
					var _p10 = _p9._0;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p10.amount),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' / ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p10.dailyIntake),
								A2(_elm_lang$core$Basics_ops['++'], '', _p10.unitOfMeasure))));
				default:
					return '';
			}
		}();
		var header = function () {
			var _p11 = hoverItem;
			switch (_p11.ctor) {
				case 'NothingHovered':
					return 'Summary';
				case 'Nutrient':
					return _p11._0.name;
				default:
					var _p12 = A2(_elm_lang$core$Dict$get, _p11._0, foodDict);
					if (_p12.ctor === 'Nothing') {
						return '';
					} else {
						return _p12._0.name;
					}
			}
		}();
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Grid$row,
			{
				ctor: '::',
				_0: _user$project$BootstrapHelper$rowBuffer,
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Grid$col,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Card$view(
							A3(
								_rundis$elm_bootstrap$Bootstrap_Card$footer,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(sideHeader),
									_1: {ctor: '[]'}
								},
								A3(
									_rundis$elm_bootstrap$Bootstrap_Card$block,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_rundis$elm_bootstrap$Bootstrap_Card$text,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(info),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									A3(
										_rundis$elm_bootstrap$Bootstrap_Card$header,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background-color', _1: colour},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(header),
											_1: {ctor: '[]'}
										},
										_rundis$elm_bootstrap$Bootstrap_Card$config(
											{ctor: '[]'}))))),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$_p13 = _rtfeldman$elm_css_helpers$Html_CssHelpers$withNamespace('');
var _user$project$Main$id = _user$project$Main$_p13.id;
var _user$project$Main$class = _user$project$Main$_p13.$class;
var _user$project$Main$classList = _user$project$Main$_p13.classList;
var _user$project$Main$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {navbarState: a, searchText: b, nutrients: c, nutrientPopovers: d, selectedFoods: e, potentialFoods: f, recommendedFoods: g, hoverItem: h, connectionModalState: i, loadingPotentialFoods: j, history: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Main$NothingHovered = {ctor: 'NothingHovered'};
var _user$project$Main$Food = function (a) {
	return {ctor: 'Food', _0: a};
};
var _user$project$Main$Nutrient = function (a) {
	return {ctor: 'Nutrient', _0: a};
};
var _user$project$Main$About = {ctor: 'About'};
var _user$project$Main$Home = {ctor: 'Home'};
var _user$project$Main$route = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(_evancz$url_parser$UrlParser$map, _user$project$Main$Home, _evancz$url_parser$UrlParser$top),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_user$project$Main$About,
				_evancz$url_parser$UrlParser$s('about')),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$ConnectionModal = function (a) {
	return {ctor: 'ConnectionModal', _0: a};
};
var _user$project$Main$UpdateNutrientPopover = F2(
	function (a, b) {
		return {ctor: 'UpdateNutrientPopover', _0: a, _1: b};
	});
var _user$project$Main$Hover = function (a) {
	return {ctor: 'Hover', _0: a};
};
var _user$project$Main$RemoveFood = function (a) {
	return {ctor: 'RemoveFood', _0: a};
};
var _user$project$Main$UpdateFoodAmount = F2(
	function (a, b) {
		return {ctor: 'UpdateFoodAmount', _0: a, _1: b};
	});
var _user$project$Main$UpdateFoodQuantity = F2(
	function (a, b) {
		return {ctor: 'UpdateFoodQuantity', _0: a, _1: b};
	});
var _user$project$Main$foodRowConfig = {
	onFocus: function (_p14) {
		return _user$project$Main$Hover(
			_user$project$Main$Food(_p14));
	},
	onBlur: _user$project$Main$Hover(_user$project$Main$NothingHovered),
	onRemove: _user$project$Main$RemoveFood,
	onQuantityChange: _user$project$Main$UpdateFoodQuantity,
	onAmountChange: _user$project$Main$UpdateFoodAmount
};
var _user$project$Main$GotNutrients = function (a) {
	return {ctor: 'GotNutrients', _0: a};
};
var _user$project$Main$FoundRecommendedFoods = function (a) {
	return {ctor: 'FoundRecommendedFoods', _0: a};
};
var _user$project$Main$GotFood = function (a) {
	return {ctor: 'GotFood', _0: a};
};
var _user$project$Main$SelectFood = function (a) {
	return {ctor: 'SelectFood', _0: a};
};
var _user$project$Main$recommendedFoodRowConfig = {onClick: _user$project$Main$SelectFood};
var _user$project$Main$FoundFoods = function (a) {
	return {ctor: 'FoundFoods', _0: a};
};
var _user$project$Main$update = F2(
	function (message, model) {
		var _p15 = message;
		switch (_p15.ctor) {
			case 'UrlChange':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							history: {
								ctor: '::',
								_0: A2(_evancz$url_parser$UrlParser$parsePath, _user$project$Main$route, _p15._0),
								_1: model.history
							}
						}),
					{ctor: '[]'});
			case 'NewUrl':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$navigation$Navigation$newUrl(_p15._0)
				};
			case 'NavbarMsg':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{navbarState: _p15._0}),
					{ctor: '[]'});
			case 'ClearSearch':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{potentialFoods: _user$project$Connection_Models$NotLoaded}),
					{ctor: '[]'});
			case 'UpdateSearchText':
				var _p16 = _p15._0;
				return (_elm_lang$core$String$isEmpty(
					_elm_lang$core$String$trim(_p16)) || (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(_p16),
					3) < 0)) ? A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{potentialFoods: _user$project$Connection_Models$NotLoaded, searchText: _p16}),
					{ctor: '[]'}) : A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							searchText: _p16,
							potentialFoods: _user$project$Connection_Models$Loading(
								_user$project$Connection_Models$emptyListIfNotLoaded(model.potentialFoods))
						}),
					{
						ctor: '::',
						_0: A2(_user$project$Food_Api$searchFoods, _p16, _user$project$Main$FoundFoods),
						_1: {ctor: '[]'}
					});
			case 'ClearAllSelected':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{selectedFoods: _user$project$Connection_Models$NotLoaded}),
					{ctor: '[]'});
			case 'FoundFoods':
				if (_p15._0.ctor === 'Err') {
					return _user$project$Main$showConnectionError(
						_elm_lang$core$Native_Utils.update(
							model,
							{potentialFoods: _user$project$Connection_Models$NotLoaded}));
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								potentialFoods: _user$project$Connection_Models$Loaded(_p15._0._0)
							}),
						{ctor: '[]'});
				}
			case 'SelectFood':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedFoods: _user$project$Connection_Models$Loading(
								_user$project$Connection_Models$emptyDictIfNotLoaded(model.selectedFoods))
						}),
					{
						ctor: '::',
						_0: A2(_user$project$Food_Api$getFood, _p15._0.id, _user$project$Main$GotFood),
						_1: {ctor: '[]'}
					});
			case 'GotFood':
				if (_p15._0.ctor === 'Err') {
					return _user$project$Main$showConnectionError(model);
				} else {
					var _p17 = _p15._0._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								selectedFoods: _user$project$Connection_Models$Loaded(
									A3(
										_elm_lang$core$Dict$insert,
										_p17.id,
										_p17,
										_user$project$Connection_Models$emptyDictIfNotLoaded(model.selectedFoods))),
								recommendedFoods: _user$project$Connection_Models$Loading(
									_user$project$Connection_Models$emptyListIfNotLoaded(model.recommendedFoods))
							}),
						{
							ctor: '::',
							_0: A2(
								_user$project$Food_Api$getRecommendedFoods,
								_elm_lang$core$Dict$values(
									_user$project$Connection_Models$emptyDictIfNotLoaded(model.selectedFoods)),
								_user$project$Main$FoundRecommendedFoods),
							_1: {ctor: '[]'}
						});
				}
			case 'FoundRecommendedFoods':
				if (_p15._0.ctor === 'Ok') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								recommendedFoods: _user$project$Connection_Models$Loaded(_p15._0._0)
							}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'GotNutrients':
				if (_p15._0.ctor === 'Err') {
					return _user$project$Main$showConnectionError(model);
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								nutrients: _elm_lang$core$Dict$fromList(
									A2(
										_elm_lang$core$List$map,
										function (n) {
											return {ctor: '_Tuple2', _0: n.id, _1: n};
										},
										_p15._0._0))
							}),
						{ctor: '[]'});
				}
			case 'UpdateFoodQuantity':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedFoods: _user$project$Connection_Models$Loaded(
								A3(
									_elm_lang$core$Dict$update,
									_p15._0,
									_elm_lang$core$Maybe$map(
										function (food) {
											return _elm_lang$core$Native_Utils.update(
												food,
												{quantity: _p15._1});
										}),
									_user$project$Connection_Models$emptyDictIfNotLoaded(model.selectedFoods)))
						}),
					{ctor: '[]'});
			case 'UpdateFoodAmount':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedFoods: _user$project$Connection_Models$Loaded(
								A3(
									_elm_lang$core$Dict$update,
									_p15._0,
									_elm_lang$core$Maybe$map(
										function (food) {
											return _elm_lang$core$Native_Utils.update(
												food,
												{amount: _p15._1});
										}),
									_user$project$Connection_Models$emptyDictIfNotLoaded(model.selectedFoods)))
						}),
					{ctor: '[]'});
			case 'RemoveFood':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedFoods: _user$project$Connection_Models$Loaded(
								A2(
									_elm_lang$core$Dict$remove,
									_p15._0,
									_user$project$Connection_Models$emptyDictIfNotLoaded(model.selectedFoods)))
						}),
					{ctor: '[]'});
			case 'Hover':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{hoverItem: _p15._0}),
					{ctor: '[]'});
			case 'UpdateNutrientPopover':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							nutrientPopovers: A3(_elm_lang$core$Dict$insert, _p15._0, _p15._1, model.nutrientPopovers)
						}),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{connectionModalState: _p15._0}),
					{ctor: '[]'});
		}
	});
var _user$project$Main$ClearAllSelected = {ctor: 'ClearAllSelected'};
var _user$project$Main$selectedFoodSectionConfig = {onClearAll: _user$project$Main$ClearAllSelected};
var _user$project$Main$UpdateSearchText = function (a) {
	return {ctor: 'UpdateSearchText', _0: a};
};
var _user$project$Main$ClearSearch = {ctor: 'ClearSearch'};
var _user$project$Main$searchBar = F2(
	function (searchText, potentialFoods) {
		var content = function () {
			var _p18 = potentialFoods;
			switch (_p18.ctor) {
				case 'NotLoaded':
					return {ctor: '[]'};
				case 'Loading':
					return {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_ListGroup$anchor,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _user$project$Connection_View$loadingImage,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					};
				default:
					var _p19 = _p18._0;
					return _elm_lang$core$List$isEmpty(_p19) ? {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_ListGroup$anchor,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('No Results'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					} : A2(
						_elm_lang$core$List$map,
						function (food) {
							return A2(
								_rundis$elm_bootstrap$Bootstrap_ListGroup$anchor,
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_ListGroup$attrs(
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onMouseDown(
												_user$project$Main$SelectFood(food)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(food.name),
									_1: {ctor: '[]'}
								});
						},
						_p19);
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Form_InputGroup$view(
					A2(
						_rundis$elm_bootstrap$Bootstrap_Form_InputGroup$attrs,
						{
							ctor: '::',
							_0: _user$project$Main$class(
								{
									ctor: '::',
									_0: _user$project$AppCss$NiceShadow,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						A2(
							_rundis$elm_bootstrap$Bootstrap_Form_InputGroup$successors,
							{
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Form_InputGroup$span,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _Fresheyeball$elm_font_awesome$FontAwesome_Web$search,
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							_rundis$elm_bootstrap$Bootstrap_Form_InputGroup$large(
								_rundis$elm_bootstrap$Bootstrap_Form_InputGroup$config(
									_rundis$elm_bootstrap$Bootstrap_Form_InputGroup$text(
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('Search for Food'),
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$attrs(
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateSearchText),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onBlur(_user$project$Main$ClearSearch),
															_1: {
																ctor: '::',
																_0: _user$project$Main$class(
																	{
																		ctor: '::',
																		_0: _user$project$AppCss$SearchInput,
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										})))))),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Main$class(
								{
									ctor: '::',
									_0: _user$project$AppCss$SearchResults,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_ListGroup$custom(content),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Main$homePage = function (model) {
	var hoverItemFood = _user$project$Main$getFoodFromHoverItem(model.hoverItem);
	var calculateNutrients = function (nutrients) {
		return _elm_lang$core$Dict$values(
			A3(
				_user$project$Main$calculateNutrientPercentageFromFoods,
				hoverItemFood,
				_user$project$Connection_Models$emptyDictIfNotLoaded(model.selectedFoods),
				nutrients));
	};
	var constructNutrientSection = F2(
		function (text, nutrientType) {
			return A5(
				_user$project$Nutrient_View$nutrientSection,
				{onHover: _user$project$Main$UpdateNutrientPopover},
				text,
				_user$project$Main$hoverItemIsFood(model.hoverItem),
				model.nutrientPopovers,
				calculateNutrients(
					A2(_user$project$Main$filterNutrient, nutrientType, model.nutrients)));
		});
	return {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Grid$col,
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs12,
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm6,
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Grid$row,
					{
						ctor: '::',
						_0: _user$project$BootstrapHelper$rowBuffer,
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Grid$col,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(_user$project$Main$searchBar, model.searchText, model.potentialFoods),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Grid$row,
						{
							ctor: '::',
							_0: _user$project$BootstrapHelper$rowBuffer,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Grid$col,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A3(_user$project$Food_View$selectedFoodSection, _user$project$Main$selectedFoodSectionConfig, _user$project$Main$foodRowConfig, model.selectedFoods),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Grid$col,
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs12,
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm6,
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Grid$row,
						{
							ctor: '::',
							_0: _user$project$BootstrapHelper$rowBuffer,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Grid$col,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(constructNutrientSection, 'Vitamins', _user$project$Nutrient_Models$Vitamin),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Grid$col,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(constructNutrientSection, 'Minerals', _user$project$Nutrient_Models$Mineral),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
};
var _user$project$Main$NewUrl = function (a) {
	return {ctor: 'NewUrl', _0: a};
};
var _user$project$Main$UrlChange = function (a) {
	return {ctor: 'UrlChange', _0: a};
};
var _user$project$Main$NavbarMsg = function (a) {
	return {ctor: 'NavbarMsg', _0: a};
};
var _user$project$Main$init = function (location) {
	var _p20 = _rundis$elm_bootstrap$Bootstrap_Navbar$initialState(_user$project$Main$NavbarMsg);
	var navbarState = _p20._0;
	var navbarCmd = _p20._1;
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		{
			navbarState: navbarState,
			searchText: '',
			nutrients: _elm_lang$core$Dict$empty,
			nutrientPopovers: _elm_lang$core$Dict$empty,
			selectedFoods: _user$project$Connection_Models$NotLoaded,
			potentialFoods: _user$project$Connection_Models$NotLoaded,
			recommendedFoods: _user$project$Connection_Models$NotLoaded,
			hoverItem: _user$project$Main$NothingHovered,
			connectionModalState: _user$project$Connection_Models$Hide,
			loadingPotentialFoods: true,
			history: {
				ctor: '::',
				_0: A2(_evancz$url_parser$UrlParser$parsePath, _user$project$Main$route, location),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _user$project$Nutrient_Api$getAllNutrients(_user$project$Main$GotNutrients),
			_1: {
				ctor: '::',
				_0: navbarCmd,
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$topBar = function (model) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Navbar$view,
		model.navbarState,
		A2(
			_rundis$elm_bootstrap$Bootstrap_Navbar$items,
			{
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Navbar$itemLink,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							_user$project$Main$NewUrl('/about')),
						_1: {
							ctor: '::',
							_0: _user$project$Main$class(
								{
									ctor: '::',
									_0: _user$project$AppCss$Clickable,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('About'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			A3(
				_rundis$elm_bootstrap$Bootstrap_Navbar$brand,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$Main$NewUrl('/')),
					_1: {
						ctor: '::',
						_0: _user$project$Main$class(
							{
								ctor: '::',
								_0: _user$project$AppCss$Clickable,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('images/logo.png'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '30px'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text('Get Your Nutrients'),
						_1: {ctor: '[]'}
					}
				},
				_rundis$elm_bootstrap$Bootstrap_Navbar$fixTop(
					_rundis$elm_bootstrap$Bootstrap_Navbar$withAnimation(
						_rundis$elm_bootstrap$Bootstrap_Navbar$config(_user$project$Main$NavbarMsg))))));
};
var _user$project$Main$view = function (model) {
	var page = function () {
		var _p21 = _elm_lang$core$List$head(model.history);
		if (_p21.ctor === 'Just') {
			var _p22 = _p21._0;
			if (_p22.ctor === 'Just') {
				var _p23 = _p22._0;
				if (_p23.ctor === 'Home') {
					return _user$project$Main$homePage(model);
				} else {
					return _user$project$Main$aboutPage(model);
				}
			} else {
				return _user$project$Main$homePage(model);
			}
		} else {
			return _user$project$Main$homePage(model);
		}
	}();
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Grid$container,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_CDN$stylesheet,
			_1: {
				ctor: '::',
				_0: _user$project$Main$topBar(model),
				_1: {
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Grid$row,
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Grid_Row$attrs(
								{
									ctor: '::',
									_0: _user$project$Main$class(
										{
											ctor: '::',
											_0: _user$project$AppCss$Content,
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						page),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Connection_View$connectionError,
							{
								onClose: _user$project$Main$ConnectionModal(_user$project$Connection_Models$Hide)
							},
							model.connectionModalState),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Main$UrlChange,
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
